Index: jython/Lib/test/test_sys.py
===================================================================
--- jython.orig/Lib/test/test_sys.py
+++ jython/Lib/test/test_sys.py
@@ -273,61 +273,6 @@ class SysModuleTest(unittest.TestCase):
         self.assertEqual(out, '?')
 
 
-class SizeofTest(unittest.TestCase):
-    """Jython modified version of getsizeof"""
-
-    def setUp(self):
-        self.P = struct.calcsize('P')
-        self.longdigit = sys.long_info.sizeof_digit
-        self.file = open(test.test_support.TESTFN, 'wb')
-
-    def tearDown(self):
-        self.file.close()
-        test.test_support.unlink(test.test_support.TESTFN)
-
-    check_sizeof = test.test_support.check_sizeof
-
-    def test_default(self):
-        size = test.test_support.calcobjsize
-        self.assertEqual(sys.getsizeof(True, -1), size('l'))
-
-    def test_objecttypes(self):
-        # check all types defined in Objects/
-        size = test.test_support.calcobjsize
-        vsize = test.test_support.calcvobjsize
-        check = self.check_sizeof
-        # bool
-        check(True, size('l'))
-        # buffer
-        with test.test_support.check_py3k_warnings():
-            check(buffer(''), size('1P2Pil'))
-        # builtin_function_or_method
-        check(len, size('3P'))
-        # bytearray_iterator
-        check(iter(bytearray()), size('2PP'))
-        # cell
-        def get_cell():
-            x = 42
-            def inner():
-                return x
-            return inner
-        check(get_cell().func_closure[0], size('2P'))
-        # classobj (old-style class)
-        class class_oldstyle():
-            def method():
-                pass
-        check(class_oldstyle, size('6P'))
-        # instance (old-style class)
-        check(class_oldstyle(), size('3P'))
-        # instancemethod (old-style class)
-        check(class_oldstyle().method, size('3P'))
-        # complex
-        check(complex(0,1), size('2P2d'))
-        # code
-        check(get_cell().func_code, size('4i3Pi3P'))
-        # BaseException
-        check(BaseException(), size('3P'))
-
     def test_pythontypes(self):
         # check all types defined in Python/
         size = test.test_support.calcobjsize
@@ -350,7 +295,7 @@ def test_main():
         del SysModuleTest.test_lost_displayhook
         del SysModuleTest.test_refcount
         del SysModuleTest.test_setcheckinterval
-    test.test_support.run_unittest(SysModuleTest, SizeofTest)
+    test.test_support.run_unittest(SysModuleTest)
 
 if __name__ == "__main__":
     test_main()
Index: jython/src/org/python/core/PySystemState.java
===================================================================
--- jython.orig/src/org/python/core/PySystemState.java
+++ jython/src/org/python/core/PySystemState.java
@@ -45,8 +45,6 @@ import org.python.expose.ExposedType;
 import org.python.modules.Setup;
 import org.python.util.Generic;
 
-import com.carrotsearch.sizeof.RamUsageEstimator;
-
 import jnr.posix.util.Platform;
 
 import static org.python.core.RegistryKey.*;
@@ -458,15 +456,6 @@ public class PySystemState extends PyObj
         return recursionlimit;
     }
 
-    @SuppressWarnings("unused")
-    public long getsizeof(Object obj, long defaultVal) {
-        return getsizeof(obj);
-    }
-
-    public long getsizeof(Object obj) {
-        return RamUsageEstimator.shallowSizeOf(obj);
-    }
-
     public void setrecursionlimit(int recursionlimit) {
         if (recursionlimit <= 0) {
             throw Py.ValueError("Recursion limit must be positive");
